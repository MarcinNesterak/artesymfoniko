import express from "express";
import Event from "../models/Event.js";
import User from "../models/User.js";
import Invitation from "../models/Invitation.js";
import Participation from "../models/Participation.js";
import Contract from "../models/Contract.js";
import {
  authenticate,
  requireConductor,
  requireUser,
} from "../middleware/auth.js";
import Message from "../models/Message.js";
import MessageRead from "../models/MessageRead.js";
import { apiLimiter } from "../middleware/rateLimiter.js";
import { body, validationResult } from "express-validator";
import sendEmail from "../utils/email.js";
import { sendPushNotification } from "../utils/notificationService.js";

const router = express.Router();

// Helper do formatowania daty w polskiej strefie czasowej
const formatEventDate = (date) => {
  if (!date) return { eventDate: "", eventTime: "" };
  const d = new Date(date);
  const dateOptions = {
    timeZone: "Europe/Warsaw",
    day: "2-digit",
    month: "long",
    year: "numeric",
  };
  const timeOptions = {
    timeZone: "Europe/Warsaw",
    hour: "2-digit",
    minute: "2-digit",
    hour12: false,
  };
  return {
    eventDate: d.toLocaleDateString("pl-PL", dateOptions),
    eventTime: d.toLocaleTimeString("pl-PL", timeOptions),
  };
};

// Automatyczne archiwizowanie wydarze≈Ñ
const autoArchiveEvents = async () => {
  try {
    const thirtyMinutesAgo = new Date(Date.now() - 30 * 60 * 1000); // 30 minut temu

    const result = await Event.updateMany(
      {
        date: { $lt: thirtyMinutesAgo }, // Wydarzenia starsze ni≈º 30 min od rozpoczƒôcia
        archived: false, // Tylko nieaktywne
      },
      {
        archived: true,
      }
    );

    // Log tylko je≈õli co≈õ zosta≈Ço zarchiwizowane
    if (result.modifiedCount > 0) {
      console.log(
        `üóÇÔ∏è Auto-archived ${result.modifiedCount} events (30+ minutes after start time)`
      );
    }
  } catch (error) {
    console.error("‚ùå Auto-archive error:", error);
  }
};

// GET /api/events - pobierz wydarzenia
router.get("/", apiLimiter, requireUser, async (req, res) => {
  try {
    // Automatyczne archiwizowanie przed pobraniem listy
    await autoArchiveEvents();

    let query = {};

    if (req.user.role === "conductor") {
      // Dyrygent widzi swoje wydarzenia
      query.conductorId = req.user._id;
    } else {
      // R√≥≈ºna logika dla archiwum i aktywnych wydarze≈Ñ
      if (req.query.archived === "true") {
        // ARCHIWUM: wszystkie wydarzenia gdzie muzyk kiedykolwiek uczestniczy≈Ç
        const allParticipations = await Participation.find({
          userId: req.user._id,
        }).distinct("eventId");

        query._id = { $in: allParticipations };
      } else {
        // AKTYWNE: tylko potwierdzone uczestnictwa i oczekujƒÖce zaproszenia
        const confirmedParticipations = await Participation.find({
          userId: req.user._id,
          status: "confirmed",
        }).distinct("eventId");

        const pendingInvitations = await Invitation.find({
          userId: req.user._id,
          status: "pending",
        }).distinct("eventId");

        const eventIds = [
          ...new Set([...confirmedParticipations, ...pendingInvitations]),
        ];
        query._id = { $in: eventIds };
      }
    }

    // Filtruj wed≈Çug archived je≈õli podano
    if (req.query.archived !== undefined) {
      query.archived = req.query.archived === "true";
    }

    let events = await Event.find(query)
      .populate("conductorId", "name email")
      .sort({ date: 1 }); // Chronologicznie - najbli≈ºsze pierwsze

    // Dla muzyk√≥w - dodaj informacje o nowych wiadomo≈õciach i zmianach
    if (req.user.role === "musician") {
      const eventsWithNotifications = await Promise.all(
        events.map(async (event) => {
          // Znajd≈∫ ostatniƒÖ wizytƒô u≈ºytkownika dla tego wydarzenia
          const user = await User.findById(req.user._id);
          const lastView = user.lastEventViews?.find(
            (view) => view.eventId.toString() === event._id.toString()
          );
          const lastViewedAt = lastView?.lastViewedAt || new Date(0); // Je≈õli nigdy nie oglƒÖda≈Ç = 1970

          // Sprawd≈∫ czy sƒÖ nowe wiadomo≈õci, ignorujƒÖc wiadomo≈õci w≈Çasnego autorstwa
          const newMessagesCount = await Message.countDocuments({
            eventId: event._id,
            createdAt: { $gt: lastViewedAt },
            userId: { $ne: req.user._id.toString() }, // Ignoruj wiadomo≈õci od samego siebie
          });

          // Sprawd≈∫ czy wydarzenie by≈Ço modyfikowane od ostatniej wizyty
          const wasModified = event.lastModified > lastViewedAt;

          return {
            ...event.toObject(),
            notifications: {
              newMessages: newMessagesCount,
              wasModified: wasModified,
            },
          };
        })
      );
      events = eventsWithNotifications;
    }

    res.json({
      message: "Lista wydarze≈Ñ",
      count: events.length,
      events,
    });
  } catch (error) {
    console.error("Get events error:", error);
    res.status(500).json({
      error: "Server error",
      message: "WystƒÖpi≈Ç b≈ÇƒÖd podczas pobierania wydarze≈Ñ",
    });
  }
});

// GET /api/events/:id - pobierz konkretne wydarzenie
router.get("/:id", apiLimiter, requireUser, async (req, res) => {
  try {
    // Automatyczne archiwizowanie przed pobraniem szczeg√≥≈Ç√≥w
    await autoArchiveEvents();

    const event = await Event.findById(req.params.id).populate(
      "conductorId",
      "name email"
    );

    if (!event) {
      return res.status(404).json({
        error: "Not found",
        message: "Wydarzenie nie zosta≈Ço znalezione",
      });
    }

    // Sprawd≈∫ czy u≈ºytkownik ma dostƒôp do tego wydarzenia
    if (req.user.role === "musician") {
      const hasAccess =
        (await Invitation.exists({
          eventId: req.params.id,
          userId: req.user._id,
        })) ||
        (await Participation.exists({
          eventId: req.params.id,
          userId: req.user._id,
        }));

      if (!hasAccess) {
        return res.status(403).json({
          error: "Forbidden",
          message: "Brak dostƒôpu do tego wydarzenia",
        });
      }
    } else if (
      req.user.role === "conductor" &&
      !event.conductorId.equals(req.user._id)
    ) {
      return res.status(403).json({
        error: "Forbidden",
        message: "Mo≈ºesz przeglƒÖdaƒá tylko swoje wydarzenia",
      });
    }

    // Pobierz dodatkowe informacje
    const invitations = await Invitation.find({
      eventId: req.params.id,
    }).populate("userId", "name email instrument");

    const participations = await Participation.find({
      eventId: req.params.id,
    }).populate(
      "userId",
      "name email instrument personalData.address personalData.pesel personalData.bankAccountNumber"
    );

    res.json({
      message: "Szczeg√≥≈Çy wydarzenia",
      event,
      invitations,
      participations,
    });
  } catch (error) {
    console.error("Get event error:", error);
    res.status(500).json({
      error: "Server error",
      message: "WystƒÖpi≈Ç b≈ÇƒÖd podczas pobierania wydarzenia",
    });
  }
});

// POST /api/events - stw√≥rz nowe wydarzenie (tylko dyrygent)
router.post(
  "/",
  requireConductor,
  [
    // Regu≈Çy walidacji
    body("title")
      .not()
      .isEmpty()
      .trim()
      .escape()
      .withMessage("Tytu≈Ç wydarzenia jest wymagany."),
    body("date")
      .isISO8601()
      .toDate()
      .withMessage("Data musi byƒá w prawid≈Çowym formacie."),
    body("location")
      .not()
      .isEmpty()
      .trim()
      .escape()
      .withMessage("Lokalizacja jest wymagana."),
    body("description").optional().trim().escape(),
    body("dresscode").optional().trim().escape(),
    body("inviteUserIds")
      .isArray()
      .withMessage("Lista muzyk√≥w musi byƒá tablicƒÖ."),
  ],
  async (req, res) => {
    // Sprawdzenie wynik√≥w walidacji
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    try {
      await autoArchiveEvents();

      const {
        title,
        date,
        description,
        schedule,
        importantInfo,
        program,
        inviteUserIds,
        location,
        dresscode,
      } = req.body;

      // Walidacja, czy data jest w przysz≈Ço≈õci
      if (new Date(date) <= new Date()) {
        return res.status(400).json({
          errors: [{ msg: "Data wydarzenia musi byƒá w przysz≈Ço≈õci." }],
        });
      }

      // Utw√≥rz wydarzenie
      const newEvent = new Event({
        title,
        date,
        description,
        schedule,
        importantInfo,
        program,
        dresscode,
        conductorId: req.user._id,
        location,
      });

      const savedEvent = await newEvent.save();

      // Utw√≥rz zaproszenia i wy≈õlij powiadomienia
      if (inviteUserIds && inviteUserIds.length > 0) {
        const invitations = inviteUserIds.map((userId) => ({
          eventId: savedEvent._id,
          userId: userId,
        }));
        await Invitation.insertMany(invitations);

        // 1. Zbierz ID muzyk√≥w do powiadomie≈Ñ
        const musicianIds = inviteUserIds.map((id) => id.toString());

        // 2. Wy≈õlij powiadomienia PUSH do wszystkich zaproszonych
        const pushPayload = {
          title: "Nowe zaproszenie!",
          body: `Zosta≈Çe≈õ zaproszony/a na wydarzenie: ${savedEvent.title}`,
          url: `/musician/dashboard`,
        };
        // Celowo nie czekamy na wynik (fire and forget)
        sendPushNotification(musicianIds, pushPayload);

        // 3. Wy≈õlij powiadomienia E-MAIL do wszystkich zaproszonych
        const invitedUsers = await User.find({
          _id: { $in: inviteUserIds },
        }).select("email name");

        const { eventDate, eventTime } = formatEventDate(date);

        for (const user of invitedUsers) {
          await sendEmail({
            to: user.email,
            subject: `Zaproszenie do udzia≈Çu w wydarzeniu: ${title}`,
            html: `
              <h1>Cze≈õƒá ${user.name.split(" ")[0]}!</h1>
              <p>Zosta≈Çe≈õ/a≈õ zaproszony/a do udzia≈Çu w nowym wydarzeniu: <strong>${title}</strong>.</p>
              <p>Data: ${eventDate} o godzinie ${eventTime}</p>
              <p>Lokalizacja: ${location}</p>
              <p>Aby zobaczyƒá szczeg√≥≈Çy i odpowiedzieƒá na zaproszenie, zaloguj siƒô do aplikacji.</p>
              <a href="https://www.artesymfoniko.pl">www.artesymfoniko.pl</a>
              login: ${user.email}
              <p> Je≈õli logujesz siƒô poraz pierwszy, to Twoje has≈Ço to: haslo123</p>
              <br>
              <p>Pozdrawiamy,</p>
              <p><strong>Artesymfoniko</strong></p>
            `,
          });
        }
      }

      res.status(201).json({
        message: "Wydarzenie zosta≈Ço utworzone, a zaproszenia wys≈Çane.",
        event: savedEvent,
      });
    } catch (error) {
      console.error("Create event error:", error);
      res.status(500).json({
        error: "Server error",
        message: "WystƒÖpi≈Ç b≈ÇƒÖd podczas tworzenia wydarzenia",
      });
    }
  }
);

// PUT /api/events/:id - zaktualizuj wydarzenie (tylko dyrygent-w≈Ça≈õciciel)
router.put(
  "/:id",
  requireConductor,
  [
    // Walidacja, podobna do tworzenia
    body("title")
      .optional()
      .notEmpty()
      .trim()
      .escape()
      .withMessage("Tytu≈Ç nie mo≈ºe byƒá pusty."),
    body("date")
      .optional()
      .isISO8601()
      .toDate()
      .withMessage("Nieprawid≈Çowy format daty."),
    body("location")
      .optional()
      .notEmpty()
      .trim()
      .escape()
      .withMessage("Lokalizacja nie mo≈ºe byƒá pusta."),
    body("description").optional().trim().escape(),
    body("schedule").optional().trim().escape(),
    body("program").optional().trim().escape(),
    body("dresscode")
      .optional()
      .isIn(["", "frak", "black", "casual", "other"])
      .withMessage("Nieprawid≈Çowa warto≈õƒá dresscode."),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    try {
      const event = await Event.findById(req.params.id);

      if (!event) {
        return res.status(404).json({ message: "Wydarzenie nie znalezione." });
      }

      // Sprawd≈∫, czy dyrygent jest w≈Ça≈õcicielem wydarzenia
      if (event.conductorId.toString() !== req.user._id.toString()) {
        return res
          .status(403)
          .json({ message: "Brak uprawnie≈Ñ do edycji tego wydarzenia." });
      }

      // 1. Pobierz aktualne zaproszenia PRZED modyfikacjƒÖ
      const originalInvitations = await Invitation.find({ eventId: event._id });
      const originalInvitedUserIds = originalInvitations.map((inv) =>
        inv.userId.toString()
      );

      // Aktualizuj pola, kt√≥re zosta≈Çy przes≈Çane w ciele ≈ºƒÖdania
      const {
        title,
        date,
        description,
        schedule,
        program,
        location,
        dresscode,
        inviteUserIds,
      } = req.body;
      if (title) event.title = title;
      if (date) event.date = date;
      if (description) event.description = description;
      if (schedule) event.schedule = schedule;
      if (program) event.program = program;
      if (location) event.location = location;
      if (dresscode) event.dresscode = dresscode;

      // Oznacz jako zmodyfikowane
      event.lastModified = new Date();

      // 2. Logika obs≈Çugi zaprosze≈Ñ (je≈õli inviteUserIds jest przekazane)
      if (inviteUserIds && Array.isArray(inviteUserIds)) {
        const newInvitedUserIds = inviteUserIds.map((id) => id.toString());

        // 2a. Znajd≈∫ usuniƒôtych muzyk√≥w
        const removedUserIds = originalInvitedUserIds.filter(
          (id) => !newInvitedUserIds.includes(id)
        );
        if (removedUserIds.length > 0) {
          // Usu≈Ñ ich zaproszenia i potwierdzenia uczestnictwa
          await Invitation.deleteMany({
            eventId: event._id,
            userId: { $in: removedUserIds },
          });
          await Participation.deleteMany({
            eventId: event._id,
            userId: { $in: removedUserIds },
          });
          console.log(
            `Usuniƒôto zaproszenia dla ${removedUserIds.length} muzyk√≥w.`
          );
        }

        // 2b. Znajd≈∫ nowo dodanych muzyk√≥w
        const addedUserIds = newInvitedUserIds.filter(
          (id) => !originalInvitedUserIds.includes(id)
        );

        if (addedUserIds.length > 0) {
          // Utw√≥rz dla nich nowe zaproszenia
          const newInvitations = addedUserIds.map((userId) => ({
            eventId: event._id,
            userId: userId,
          }));
          await Invitation.insertMany(newInvitations);
          console.log(`Dodano ${addedUserIds.length} nowych zaprosze≈Ñ.`);

          // 2c. Wy≈õlij powiadomienia email do nowo zaproszonych
          const newlyInvitedUsers = await User.find({
            _id: { $in: addedUserIds },
          }).select("email name");
          for (const user of newlyInvitedUsers) {
            const { eventDate, eventTime } = formatEventDate(event.date);
            await sendEmail({
              to: user.email,
              subject: `Nowe zaproszenie do wydarzenia: ${event.title}`,
              html: `
                <h1>Cze≈õƒá ${user.name.split(" ")[0]}!</h1>
                <p>Zosta≈Çe≈õ/a≈õ zaproszony/a do udzia≈Çu w wydarzeniu: <strong>${
                  event.title
                }</strong>.</p>
                <p>Data: ${eventDate} o godzinie ${eventTime}</p>
                <p>Lokalizacja: ${location || event.location}</p>
                <p>Wydarzenie zosta≈Ço zaktualizowane. Zaloguj siƒô do aplikacji, aby zobaczyƒá szczeg√≥≈Çy i potwierdziƒá sw√≥j udzia≈Ç.</p>
                <br>
                <p>Pozdrawiamy,</p>
                <p><strong>Artesymfoniko</strong></p>
              `,
            });
          }
          console.log(
            `Wys≈Çano powiadomienia e-mail do ${newlyInvitedUsers.length} nowych muzyk√≥w.`
          );
        }
      }

      const updatedEvent = await event.save();

      // Wy≈õlij powiadomienie do uczestnik√≥w o zmianie
      const participations = await Participation.find({
        eventId: req.params.id,
        status: "confirmed",
      }).populate("userId");

      const musicianIds = participations.map(p => p.userId._id);
      
      if (musicianIds.length > 0) {
        const { eventDate, eventTime } = formatEventDate(updatedEvent.date);

        // Przygotuj tre≈õƒá powiadomie≈Ñ
        const emailSubject = `Aktualizacja wydarzenia: ${updatedEvent.title}`;
        const emailText = `Wydarzenie "${updatedEvent.title}" zaplanowane na ${eventDate} o ${eventTime} zosta≈Ço zaktualizowane. Sprawd≈∫ szczeg√≥≈Çy w aplikacji.`;
        const pushPayload = {
            title: `Wydarzenie "${updatedEvent.title}" zosta≈Ço zaktualizowane`,
            body: `Sprawd≈∫ nowe szczeg√≥≈Çy w aplikacji.`
        };

        // Wy≈õlij powiadomienia (E-mail + Push)
        await Promise.all(participations.map(async (p) => {
          if (p.userId && p.userId.email) {
            sendEmail(p.userId.email, emailSubject, emailText);
          }
        }));
        
        // Wy≈õlij powiadomienie push do wszystkich muzyk√≥w jednocze≈õnie
        await sendPushNotification(musicianIds, pushPayload);
        
        console.log(`Successfully sent update notifications for event ${updatedEvent._id} to ${musicianIds.length} musicians.`);
      }

      res.json({
        message: "Wydarzenie zosta≈Ço pomy≈õlnie zaktualizowane.",
        event: updatedEvent,
      });
    } catch (error) {
      console.error("Update event error:", error);
      res.status(500).json({
        message: "B≈ÇƒÖd serwera podczas aktualizacji wydarzenia.",
      });
    }
  }
);

// DELETE /api/events/:id - usu≈Ñ wydarzenie (tylko dyrygent-w≈Ça≈õciciel)
router.delete("/:id", requireConductor, async (req, res) => {
  try {
    await autoArchiveEvents();

    const event = await Event.findById(req.params.id);

    if (!event) {
      return res.status(404).json({
        error: "Not found",
        message: "Wydarzenie nie zosta≈Ço znalezione",
      });
    }

    // Sprawd≈∫ czy dyrygent jest w≈Ça≈õcicielem wydarzenia
    if (!event.conductorId.equals(req.user._id)) {
      return res.status(403).json({
        error: "Forbidden",
        message: "Mo≈ºesz usuwaƒá tylko swoje wydarzenia",
      });
    }

    // Usu≈Ñ wszystkie powiƒÖzane dane
    await Invitation.deleteMany({ eventId: req.params.id });
    await Participation.deleteMany({ eventId: req.params.id });
    await Message.deleteMany({ eventId: req.params.id });
    await MessageRead.deleteMany({ eventId: req.params.id });

    // Na ko≈Ñcu usu≈Ñ samo wydarzenie
    await Event.findByIdAndDelete(req.params.id);

    res.json({
      message: "Wydarzenie i wszystkie powiƒÖzane dane zosta≈Çy usuniƒôte",
      deletedEventId: event._id,
    });
  } catch (error) {
    console.error("Delete event error:", error);
    res.status(500).json({
      error: "Server error",
      message: "WystƒÖpi≈Ç b≈ÇƒÖd podczas usuwania wydarzenia",
    });
  }
});

// POST /api/events/:id/invite - zapro≈õ muzyk√≥w do wydarzenia
router.post("/:id/invite", requireConductor, async (req, res) => {
  try {
    await autoArchiveEvents(); // Auto-archive before inviting

    const { userIds } = req.body;

    if (!userIds || !Array.isArray(userIds) || userIds.length === 0) {
      return res.status(400).json({
        error: "Validation error",
        message: "Lista ID u≈ºytkownik√≥w jest wymagana",
      });
    }

    const event = await Event.findById(req.params.id);

    if (!event) {
      return res.status(404).json({
        error: "Not found",
        message: "Wydarzenie nie zosta≈Ço znalezione",
      });
    }

    // Sprawd≈∫ czy dyrygent jest w≈Ça≈õcicielem wydarzenia
    if (!event.conductorId.equals(req.user._id)) {
      return res.status(403).json({
        error: "Forbidden",
        message: "Mo≈ºesz zapraszaƒá tylko do swoich wydarze≈Ñ",
      });
    }

    // Sprawd≈∫ kt√≥re zaproszenia ju≈º istniejƒÖ
    const existingInvitations = await Invitation.find({
      eventId: req.params.id,
      userId: { $in: userIds },
    }).distinct("userId");

    // Filtruj nowych u≈ºytkownik√≥w
    const newUserIds = userIds.filter(
      (userId) =>
        !existingInvitations.some(
          (existingId) => existingId.toString() === userId
        )
    );

    if (newUserIds.length === 0) {
      return res.status(400).json({
        error: "Validation error",
        message: "Wszyscy podani u≈ºytkownicy zostali ju≈º zaproszeni",
      });
    }

    // Utw√≥rz nowe zaproszenia
    const invitations = newUserIds.map((userId) => ({
      eventId: req.params.id,
      userId: userId,
      status: "pending",
    }));

    await Invitation.insertMany(invitations);

    // Aktualizuj licznik zaprosze≈Ñ i oznacz jako zmodyfikowane
    const totalInvitations = await Invitation.countDocuments({
      eventId: req.params.id,
    });
    event.invitedCount = totalInvitations;
    event.lastModified = new Date();
    await event.save();

    // Wy≈õlij powiadomienia e-mail do nowo zaproszonych
    try {
      const newlyInvitedUsers = await User.find({
        _id: { $in: newUserIds },
      }).select("email name");
      for (const user of newlyInvitedUsers) {
        const { eventDate, eventTime } = formatEventDate(event.date);
        await sendEmail({
          to: user.email,
          subject: `Zaproszenie do udzia≈Çu w wydarzeniu: ${event.title}`,
          html: `
            <h1>Cze≈õƒá ${user.name.split(" ")[0]}!</h1>
            <p>Zosta≈Çe≈õ/a≈õ zaproszony/a do udzia≈Çu w wydarzeniu: <strong>${
              event.title
            }</strong>.</p>
            <p>Data: ${eventDate} o godzinie ${eventTime}</p>
            <p>Lokalizacja: ${event.location}</p>
            <p>Aby zobaczyƒá szczeg√≥≈Çy i odpowiedzieƒá na zaproszenie, zaloguj siƒô do aplikacji.</p>
            <br>
            <p>Pozdrawiamy,</p>
            <p><strong>Artesymfoniko</strong></p>
          `,
        });
      }
      console.log(
        `Wys≈Çano powiadomienia e-mail do ${newlyInvitedUsers.length} nowych muzyk√≥w.`
      );
    } catch (emailError) {
      console.error(
        "B≈ÇƒÖd podczas wysy≈Çania e-maili z zaproszeniami (szybkie zapraszanie):",
        emailError
      );
      // Nie przerywamy operacji, zaproszenia w systemie sƒÖ wa≈ºniejsze
    }

    res.json({
      message: `Wys≈Çano ${newUserIds.length} nowych zaprosze≈Ñ`,
      invitedCount: newUserIds.length,
      totalInvitations: totalInvitations,
    });
  } catch (error) {
    console.error("Invite users error:", error);
    res.status(500).json({
      error: "Server error",
      message: "WystƒÖpi≈Ç b≈ÇƒÖd podczas wysy≈Çania zaprosze≈Ñ",
    });
  }
});

// POST /api/events/:id/respond - odpowiedz na zaproszenie (tylko muzyk)
router.post("/:id/respond", requireUser, async (req, res) => {
  try {
    await autoArchiveEvents(); // Auto-archive before responding

    const { status } = req.body;

    if (!status || !["confirmed", "declined"].includes(status)) {
      return res.status(400).json({
        error: "Validation error",
        message: 'Status musi byƒá "confirmed" lub "declined"',
      });
    }

    // Sprawd≈∫ czy wydarzenie istnieje
    const event = await Event.findById(req.params.id);
    if (!event) {
      return res.status(404).json({
        error: "Not found",
        message: "Wydarzenie nie zosta≈Ço znalezione",
      });
    }

    // Sprawd≈∫ czy u≈ºytkownik ma zaproszenie
    const invitation = await Invitation.findOne({
      eventId: req.params.id,
      userId: req.user._id,
      status: "pending",
    });

    if (!invitation) {
      return res.status(404).json({
        error: "Not found",
        message: "Nie znaleziono oczekujƒÖcego zaproszenia",
      });
    }

    // Sprawd≈∫ czy u≈ºytkownik ju≈º nie odpowiedzia≈Ç
    const existingParticipation = await Participation.findOne({
      eventId: req.params.id,
      userId: req.user._id,
    });

    if (existingParticipation) {
      return res.status(400).json({
        error: "Already responded",
        message: "Ju≈º odpowiedzia≈Çe≈õ na to zaproszenie",
      });
    }

    // Mapuj status na response
    const response = status === "confirmed" ? "accepted" : "declined";

    // Utw√≥rz uczestnictwo
    const participation = new Participation({
      eventId: req.params.id,
      userId: req.user._id,
      status: status,
    });

    await participation.save();

    // Aktualizuj status zaproszenia - poprawiona wersja
    invitation.status = "responded";
    invitation.response = response;
    invitation.responseDate = new Date();
    await invitation.save();

    // Aktualizuj liczniki w wydarzeniu
    if (status === "confirmed") {
      event.confirmedCount = (event.confirmedCount || 0) + 1;
    }
    await event.save();

    res.json({
      message:
        status === "confirmed"
          ? "Potwierdzi≈Çe≈õ udzia≈Ç w wydarzeniu"
          : "Odrzuci≈Çe≈õ zaproszenie",
      participation: {
        eventId: req.params.id,
        status: status,
      },
    });
  } catch (error) {
    console.error("Respond to invitation error:", error);
    res.status(500).json({
      error: "Server error",
      message: "WystƒÖpi≈Ç b≈ÇƒÖd podczas odpowiedzi na zaproszenie",
    });
  }
});

// DELETE /api/events/:id/invitations/:invitationId - odwo≈Çaj zaproszenie
router.delete(
  "/:id/invitations/:invitationId",
  requireConductor,
  async (req, res) => {
    try {
      await autoArchiveEvents();

      const { id: eventId, invitationId } = req.params;

      const event = await Event.findById(eventId);
      if (!event) {
        return res
          .status(404)
          .json({ message: "Wydarzenie nie zosta≈Ço znalezione" });
      }

      if (!event.conductorId.equals(req.user._id)) {
        return res
          .status(403)
          .json({ message: "Mo≈ºesz modyfikowaƒá tylko swoje wydarzenia" });
      }

      // Znajd≈∫ zaproszenie, upewniajƒÖc siƒô, ≈ºe nale≈ºy do tego wydarzenia
      const invitation = await Invitation.findOne({
        _id: invitationId,
        eventId: eventId, // <-- Kluczowe zabezpieczenie
      });

      if (!invitation) {
        return res
          .status(404)
          .json({
            message: "Zaproszenie nie zosta≈Ço znalezione w tym wydarzeniu",
          });
      }

      // Usu≈Ñ je
      await invitation.deleteOne();

      // Aktualizuj licznik
      const totalInvitations = await Invitation.countDocuments({ eventId });
      event.invitedCount = totalInvitations;
      await event.save();

      res.json({
        message: "Zaproszenie zosta≈Ço odwo≈Çane",
        deletedInvitationId: invitation._id,
      });
    } catch (error) {
      console.error("Cancel invitation error:", error);
      res.status(500).json({
        error: "Server error",
        message: "WystƒÖpi≈Ç b≈ÇƒÖd podczas odwo≈Çywania zaproszenia",
      });
    }
  }
);

// DELETE /api/events/:id/participants/:participantId - usu≈Ñ uczestnika
router.delete(
  "/:id/participants/:participantId",
  requireConductor,
  async (req, res) => {
    try {
      await autoArchiveEvents();

      const { id: eventId, participantId } = req.params;

      const event = await Event.findById(eventId);
      if (!event) {
        return res
          .status(404)
          .json({ message: "Wydarzenie nie zosta≈Ço znalezione" });
      }

      if (!event.conductorId.equals(req.user._id)) {
        return res
          .status(403)
          .json({ message: "Mo≈ºesz modyfikowaƒá tylko swoje wydarzenia" });
      }

      // Znajd≈∫ uczestnictwo, upewniajƒÖc siƒô, ≈ºe nale≈ºy do tego wydarzenia
      const participation = await Participation.findOne({
        _id: participantId,
        eventId: eventId, // <-- Kluczowe zabezpieczenie
      });

      if (!participation) {
        return res
          .status(404)
          .json({
            message: "Uczestnictwo nie zosta≈Ço znalezione w tym wydarzeniu",
          });
      }

      const wasConfirmed = participation.status === "confirmed";

      // Usu≈Ñ je
      await participation.deleteOne();

      // Je≈õli usuniƒôto potwierdzonego uczestnika, zaktualizuj licznik
      if (wasConfirmed) {
        const confirmedCount = await Participation.countDocuments({
          eventId,
          status: "confirmed",
        });
        event.confirmedCount = confirmedCount;
        await event.save();
      }

      res.json({
        message: "Uczestnik zosta≈Ç usuniƒôty z wydarzenia",
        deletedParticipationId: participation._id,
      });
    } catch (error) {
      console.error("Remove participant error:", error);
      res.status(500).json({
        error: "Server error",
        message: "WystƒÖpi≈Ç b≈ÇƒÖd podczas usuwania uczestnika",
      });
    }
  }
);

// GET /api/events/:id/messages - pobierz wiadomo≈õci czatu
router.get("/:id/messages", requireUser, async (req, res) => {
  try {
    await autoArchiveEvents(); // Auto-archive before fetching messages

    // Sprawd≈∫ czy u≈ºytkownik ma dostƒôp do wydarzenia (jest uczestnikiem)
    const participation = await Participation.findOne({
      eventId: req.params.id,
      userId: req.user._id,
      status: "confirmed",
    });

    if (!participation && req.user.role !== "conductor") {
      return res.status(403).json({
        error: "Forbidden",
        message: "Tylko uczestnicy wydarzenia mogƒÖ czytaƒá wiadomo≈õci",
      });
    }

    // Pobierz wszystkie wiadomo≈õci od utworzenia wydarzenia
    const messages = await Message.find({
      eventId: req.params.id,
    })
      .populate("userId", "name instrument")
      .sort({ createdAt: -1 })
      .limit(100);

    // Je≈õli to dyrygent, dodaj informacje o przeczytaniach
    const event = await Event.findById(req.params.id);
    if (
      req.user.role === "conductor" &&
      event?.conductorId.equals(req.user._id)
    ) {
      // Pobierz wszystkich uczestnik√≥w wydarzenia
      const participants = await Participation.find({
        eventId: req.params.id,
        status: "confirmed",
      }).populate("userId", "name");

      // Dla ka≈ºdej wiadomo≈õci pobierz kto jƒÖ przeczyta≈Ç
      const messagesWithReadStatus = await Promise.all(
        messages.map(async (message) => {
          const reads = await MessageRead.find({ messageId: message._id })
            .populate("userId", "name")
            .select("userId readAt");

          return {
            ...message.toObject(),
            readBy: reads
              .filter((read) => read.userId)
              .map((read) => ({
                userId: read.userId._id,
                name: read.userId.name,
                readAt: read.readAt,
              })),
            readCount: reads.length,
            participantCount: participants.length,
            allParticipants: participants.map((p) => ({
              userId: p.userId._id,
              name: p.userId.name,
            })),
          };
        })
      );
      res.json({
        message: "Wiadomo≈õci czatu",
        count: messagesWithReadStatus.length,
        messages: messagesWithReadStatus,
      });
    } else {
      // Dla muzyk√≥w - zwr√≥ƒá normalne wiadomo≈õci
      res.json({
        message: "Wiadomo≈õci czatu",
        count: messages.length,
        messages,
      });
    }
  } catch (error) {
    console.error("Get messages error:", error);
    res.status(500).json({
      error: "Server error",
      message: "WystƒÖpi≈Ç b≈ÇƒÖd podczas pobierania wiadomo≈õci",
    });
  }
});

// POST /api/events/:id/messages - wy≈õlij wiadomo≈õƒá do czatu
router.post("/:id/messages", requireUser, async (req, res) => {
  try {
    await autoArchiveEvents(); // Auto-archive before sending message

    const { content } = req.body;

    if (!content || content.trim().length === 0) {
      return res.status(400).json({
        error: "Validation error",
        message: "Tre≈õƒá wiadomo≈õci jest wymagana",
      });
    }

    if (content.length > 500) {
      return res.status(400).json({
        error: "Validation error",
        message: "Wiadomo≈õƒá nie mo≈ºe byƒá d≈Çu≈ºsza ni≈º 500 znak√≥w",
      });
    }

    // Sprawd≈∫ czy u≈ºytkownik ma dostƒôp do wydarzenia (jest uczestnikiem lub dyrygentem)
    const participation = await Participation.findOne({
      eventId: req.params.id,
      userId: req.user._id,
      status: "confirmed",
    });

    // Sprawd≈∫ czy to dyrygent w≈Ça≈õciciel wydarzenia
    const event = await Event.findById(req.params.id);
    if (!event) {
      return res.status(404).json({
        error: "Not Found",
        message:
          "Wydarzenie, do kt√≥rego pr√≥bujesz wys≈Çaƒá wiadomo≈õƒá, nie istnieje.",
      });
    }

    const isConductor =
      req.user.role === "conductor" && event.conductorId.equals(req.user._id);

    if (!participation && !isConductor) {
      return res.status(403).json({
        error: "Forbidden",
        message: "Tylko uczestnicy wydarzenia i dyrygent mogƒÖ pisaƒá wiadomo≈õci",
      });
    }

    // Utw√≥rz nowƒÖ wiadomo≈õƒá
    const newMessage = new Message({
      eventId: req.params.id,
      userId: req.user._id,
      content: content.trim(),
    });

    await newMessage.save();

    // Pobierz wiadomo≈õƒá z populowanymi danymi
    const populatedMessage = await Message.findById(newMessage._id).populate(
      "userId",
      "name instrument"
    );

    res.status(201).json({
      message: "Wiadomo≈õƒá zosta≈Ça wys≈Çana",
      newMessage: populatedMessage,
    });
  } catch (error) {
    console.error("Send message error:", error);
    res.status(500).json({
      error: "Server error",
      message: "WystƒÖpi≈Ç b≈ÇƒÖd podczas wysy≈Çania wiadomo≈õci",
    });
  }
});

// POST /api/events/:id/messages/mark-read - oznacz wiadomo≈õci jako przeczytane
router.post("/:id/messages/mark-read", requireUser, async (req, res) => {
  try {
    await autoArchiveEvents();

    const { messageIds } = req.body;

    if (!messageIds || !Array.isArray(messageIds)) {
      return res.status(400).json({
        error: "Validation error",
        message: "messageIds musi byƒá tablicƒÖ",
      });
    }

    // Sprawd≈∫ czy u≈ºytkownik ma dostƒôp do wydarzenia
    const participation = await Participation.findOne({
      eventId: req.params.id,
      userId: req.user._id,
      status: "confirmed",
    });

    const event = await Event.findById(req.params.id);
    const isConductor =
      req.user.role === "conductor" && event?.conductorId.equals(req.user._id);

    if (!participation && !isConductor) {
      return res.status(403).json({
        error: "Forbidden",
        message:
          "Tylko uczestnicy wydarzenia mogƒÖ oznaczaƒá wiadomo≈õci jako przeczytane",
      });
    }

    // Oznacz wiadomo≈õci jako przeczytane (ignoruj duplikaty)
    const markPromises = messageIds.map(async (messageId) => {
      try {
        await MessageRead.create({
          messageId,
          userId: req.user._id,
        });
      } catch (error) {
        // Ignoruj b≈Çƒôdy duplikat√≥w (ju≈º przeczytane)
        if (error.code !== 11000) {
          console.error("Error marking message as read:", error);
        }
      }
    });

    await Promise.all(markPromises);

    res.json({
      message: "Wiadomo≈õci zosta≈Çy oznaczone jako przeczytane",
      markedCount: messageIds.length,
    });
  } catch (error) {
    console.error("Mark messages as read error:", error);
    res.status(500).json({
      error: "Server error",
      message: "WystƒÖpi≈Ç b≈ÇƒÖd podczas oznaczania wiadomo≈õci",
    });
  }
});

// Aktualizuj ostatniƒÖ wizytƒô wydarzenia
router.put("/:id/update-last-view", requireUser, async (req, res) => {
  try {
    const eventId = req.params.id;
    const userId = req.user._id;

    // Znajd≈∫ u≈ºytkownika i zaktualizuj ostatniƒÖ wizytƒô
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ error: "U≈ºytkownik nie znaleziony" });
    }

    // Znajd≈∫ istniejƒÖcy wpis lub utw√≥rz nowy
    const existingViewIndex = user.lastEventViews.findIndex(
      (view) => view.eventId.toString() === eventId
    );

    if (existingViewIndex !== -1) {
      // Aktualizuj istniejƒÖcy wpis
      user.lastEventViews[existingViewIndex].lastViewedAt = new Date();
    } else {
      // Dodaj nowy wpis
      user.lastEventViews.push({
        eventId: eventId,
        lastViewedAt: new Date(),
      });
    }

    await user.save();
    res.json({ message: "Ostatnia wizyta zaktualizowana" });
  } catch (error) {
    console.error("B≈ÇƒÖd przy aktualizacji ostatniej wizyty:", error);
    res.status(500).json({ error: "B≈ÇƒÖd serwera" });
  }
});

// GET /api/events/admin/backup - pobierz backup danych
router.get("/admin/backup", requireUser, async (req, res) => {
  try {
    // Tylko dyrygent mo≈ºe robiƒá backup
    if (req.user.role !== "conductor") {
      return res.status(403).json({ error: "Brak uprawnie≈Ñ" });
    }

    // Pobierz wszystkie dane
    const users = await User.find({}).select("+password");
    const events = await Event.find({});
    const messages = await Message.find({});
    const participations = await Participation.find({});

    const backupData = {
      createdAt: new Date().toISOString(),
      users,
      events,
      messages,
      participations,
      counts: {
        users: users.length,
        events: events.length,
        messages: messages.length,
        participations: participations.length,
      },
    };

    res.json(backupData);
  } catch (error) {
    console.error("Backup error:", error);
    res.status(500).json({ error: "B≈ÇƒÖd podczas tworzenia kopii zapasowej" });
  }
});

// POST /api/events/admin/restore - przywr√≥ƒá dane z backupu
router.post("/admin/restore", requireUser, async (req, res) => {
  try {
    // Tylko dyrygent mo≈ºe przywracaƒá backup
    if (req.user.role !== "conductor") {
      return res.status(403).json({ error: "Brak uprawnie≈Ñ" });
    }

    const { users, events, messages, participations } = req.body;

    // Sprawd≈∫ czy dane sƒÖ prawid≈Çowe
    if (!users || !events || !messages || !participations) {
      return res.status(400).json({
        error: "Nieprawid≈Çowy format danych backup",
      });
    }

    // USU≈É wszystkie istniejƒÖce dane
    await User.deleteMany({});
    await Event.deleteMany({});
    await Message.deleteMany({});
    await Participation.deleteMany({});

    // WSTAW dane z backup
    if (users.length > 0) {
      const usersWithFlag = users.map((user) => ({
        ...user,
        isImporting: true,
      }));
      await User.insertMany(usersWithFlag);
    }
    if (events.length > 0) await Event.insertMany(events);
    if (messages.length > 0) await Message.insertMany(messages);
    if (participations.length > 0)
      await Participation.insertMany(participations);

    res.json({
      message: "Backup zosta≈Ç przywr√≥cony pomy≈õlnie",
      restored: {
        users: users.length,
        events: events.length,
        messages: messages.length,
        participations: participations.length,
      },
    });
  } catch (error) {
    console.error("Restore error:", error);
    res.status(500).json({
      error: "B≈ÇƒÖd podczas przywracania danych",
      details: error.message,
    });
  }
});

// DELETE /api/events/:eventId/messages/:messageId - usu≈Ñ wiadomo≈õƒá (tylko autor)
router.delete(
  "/:eventId/messages/:messageId",
  requireUser,
  async (req, res) => {
    try {
      const { messageId } = req.params;
      const message = await Message.findById(messageId);

      if (!message) {
        return res
          .status(404)
          .json({ message: "Wiadomo≈õƒá nie zosta≈Ça znaleziona." });
      }

      // Sprawd≈∫, czy u≈ºytkownik jest autorem wiadomo≈õci
      if (message.userId.toString() !== req.user._id.toString()) {
        return res
          .status(403)
          .json({ message: "Nie masz uprawnie≈Ñ do usuniƒôcia tej wiadomo≈õci." });
      }

      // "Miƒôkkie" usuniƒôcie
      message.isDeleted = true;
      message.content = "Wiadomo≈õƒá zosta≈Ça usuniƒôta.";
      await message.save();

      res.status(200).json({ message: "Wiadomo≈õƒá zosta≈Ça usuniƒôta." });
    } catch (error) {
      console.error("Error deleting message:", error);
      res
        .status(500)
        .json({ message: "B≈ÇƒÖd serwera podczas usuwania wiadomo≈õci." });
    }
  }
);

// PATCH /api/participations/:id - zaktualizuj uczestnictwo (np. wynagrodzenie)
router.patch("/participations/:id", requireConductor, async (req, res) => {
  try {
    const { fee } = req.body;
    const participationId = req.params.id;

    // Walidacja
    if (fee === undefined || typeof fee !== "number" || fee < 0) {
      return res
        .status(400)
        .json({ message: "Nieprawid≈Çowa warto≈õƒá wynagrodzenia (fee)." });
    }

    const participation = await Participation.findById(participationId);
    if (!participation) {
      return res
        .status(404)
        .json({ message: "Uczestnictwo nie zosta≈Ço znalezione." });
    }

    // Sprawd≈∫, czy dyrygent ma prawo edytowaƒá to uczestnictwo (czy jest dyrygentem wydarzenia)
    const event = await Event.findById(participation.eventId);
    if (!event || event.conductorId.toString() !== req.user._id.toString()) {
      return res
        .status(403)
        .json({ message: "Brak uprawnie≈Ñ do edycji tego uczestnictwa." });
    }

    // Aktualizuj i zapisz
    participation.fee = fee;
    await participation.save();

    res.json({
      message: "Uczestnictwo zosta≈Ço zaktualizowane.",
      participation,
    });
  } catch (error) {
    console.error("Error updating participation:", error);
    res
      .status(500)
      .json({ message: "B≈ÇƒÖd serwera podczas aktualizacji uczestnictwa." });
  }
});

// POST /api/events/contracts - Stw√≥rz nowƒÖ umowƒô
router.post("/contracts", requireConductor, async (req, res) => {
  try {
    const contractData = req.body;
    const conductorId = req.user._id;

    const participation = await Participation.findById(
      contractData.participationId
    );
    if (!participation) {
      return res.status(404).json({ message: "Uczestnictwo nie istnieje." });
    }

    // Walidacja, czy dyrygent jest w≈Ça≈õcicielem wydarzenia
    const event = await Event.findById(contractData.eventId);
    if (!event || event.conductorId.toString() !== conductorId.toString()) {
      return res
        .status(403)
        .json({ message: "Brak uprawnie≈Ñ do tworzenia umowy dla tego wydarzenia." });
    }
    
    // Krok 1: Usu≈Ñ istniejƒÖcƒÖ umowƒô powiƒÖzanƒÖ z tym participationId (je≈õli istnieje)
    await Contract.findOneAndDelete({ participationId: participation._id });
    
    // Krok 2: Stw√≥rz i zapisz nowƒÖ umowƒô.
    const newContract = new Contract({
      ...contractData,
      conductorId,
    });
    const savedContract = await newContract.save();

    // Krok 3: Zaktualizuj uczestnictwo, przypisujƒÖc nowƒÖ umowƒô.
    participation.contractStatus = "ready";
    participation.contractId = savedContract._id;
    await participation.save();

    res.status(201).json({
      message: "Umowa zosta≈Ça pomy≈õlnie utworzona.",
      contract: savedContract,
    });
  } catch (error) {
    console.error("B≈ÇƒÖd podczas tworzenia umowy:", error);
    res
      .status(500)
      .json({ message: "WystƒÖpi≈Ç b≈ÇƒÖd serwera podczas tworzenia umowy." });
  }
});

// GET /api/events/contracts/:id - Pobierz konkretnƒÖ umowƒô
router.get("/contracts/:id", requireConductor, async (req, res) => {
  try {
    const { id } = req.params;
    const contract = await Contract.findById(id);

    if (!contract) {
      return res.status(404).json({ message: "Umowa nie zosta≈Ça znaleziona." });
    }

    // Sprawd≈∫, czy dyrygent ma uprawnienia do tego wydarzenia
    const event = await Event.findById(contract.eventId);
    if (!event || event.conductorId.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: "Brak uprawnie≈Ñ do tej umowy." });
    }

    res.json({ contract });
  } catch (error) {
    console.error("B≈ÇƒÖd podczas pobierania umowy:", error);
    res.status(500).json({ message: "WystƒÖpi≈Ç b≈ÇƒÖd serwera." });
  }
});

export default router;
